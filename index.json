[{"content":"The tech world is abuzz with statements from industry leaders like Mark Zuckerberg, the CEO of Salesforce, and others suggesting AI will soon replace mid-level software engineers. But how much of this is hype, and how much is reality? Let’s break this down logically and focus on what’s actionable today.\nThe Bold Claims Mark Zuckerberg: \u0026ldquo;Probably in 2025, Meta will have AI that can function as a mid-level engineer.\u0026rdquo;\nSalesforce CEO: \u0026ldquo;We’re not adding any more engineers next year because AI has boosted productivity.\u0026rdquo;\nNVIDIA CEO: \u0026ldquo;The IT department of every company will become the HR department for AI agents.\u0026rdquo;\nStatements like these understandably create panic among software engineers. After all, when tech visionaries speak, the industry listens.\nBut let’s pause and ask: how often have predictions about technology unfolded exactly as anticipated?\nThe Reality Check Predictions Are Not Guarantees Tech leaders are visionary, but that doesn’t make them infallible. Recall the bold claims about the metaverse a few years ago:\n\u0026ldquo;Starting today, our company is now Meta. We’re bringing the metaverse to life.\u0026rdquo; Yet here we are, not living entirely in VR headsets. Predictions are just that – forecasts based on current trends, not crystal balls.\nLessons from COVID-19 If the pandemic taught us anything, it’s that the future is unpredictable. Remember when masks seemed like a permanent accessory? Fast forward a couple of years, and we’re largely back to normal.\nThe takeaway? Nobody – not even the best in tech – can reliably predict the future. Focus on the present and adapt to change.\nAI’s Real Impact: Efficiency, Not Replacement Software Development: Then vs. Now Five Years Ago: Building a full-stack application required multiple engineers and weeks of effort. Today: A single developer, armed with tools like React and AWS, can deploy applications in days. Key Drivers:\nCloud platforms (AWS, Google Cloud) enable one-click deployments.\nAI tools (ChatGPT, Copilot) make coding faster and debugging easier.\nDevOps Evolution Gone are the days of large DevOps teams managing on-prem servers. With cloud infrastructure and tools, deployment is often a one-person job.\nInsight: \u0026ldquo;AI isn’t replacing jobs; it’s transforming them.\u0026rdquo;\nDon’t Panic – Adapt I would suggest a read of The Rise of the AI Engineer\nEfficiency Is the New Metric AI enhances productivity. If fewer engineers can achieve the same output, companies may hire less. But this doesn’t mean AI will replace engineers outright.\nFocus Areas for Engineers:\nEfficiency: Use tools like Copilot to code faster.\nSpeed: Reduce debugging and development time.\nAdaptability: Stay updated with new tools and frameworks.\nThe Expanding Pie While individual companies might need fewer engineers, the industry’s scope is growing:\nNew startups and products emerge daily.\nAI Engineers are in demand to build and maintain these systems.\nExample: Even OpenAI, the creators of ChatGPT, are hiring engineers with salaries as high as $400k. Clearly, there’s no AI apocalypse for developers.\nThe Role of Creativity Zuckerberg himself hinted that AI will free engineers to focus on creative, higher-value tasks:\n\u0026ldquo;The future is about creativity, not just basic code.\u0026rdquo;\nThink of yourself as a problem-solver, not just a code writer. AI can handle repetitive tasks, leaving you to innovate and build solutions.\nWhat Should You Do Today? Embrace AI Tools:\nUse ChatGPT, Copilot, or similar tools to improve your efficiency. Stay Curious:\nLearn new frameworks, languages, and technologies as they emerge. Think Long-Term:\nFocus on adaptability and creativity. These traits will always be in demand. Be the First Mover:\nExperiment with new tools and frameworks. Early adoption often leads to expertise. Final Thoughts Nobody can predict the future with certainty. The tech industry thrives on evolution, and AI is the next step in that journey. It’s not about replacing engineers but empowering them.\nRemember: \u0026ldquo;Focus on the present, adapt to change, and keep learning.\u0026rdquo;\nThe future belongs to those who evolve with it.\nTBF - I used ChatGPT Canvas to curate my ideas (and my thoughts) into this blog.\n","permalink":"https://inbakrish.github.io/posts/is-ai-replacing-software-engineers-a-mid-level-developers-perspective/","summary":"\u003cp\u003eThe tech world is abuzz with statements from industry leaders like Mark Zuckerberg, the CEO of Salesforce, and others suggesting AI will soon replace mid-level software engineers. But how much of this is hype, and how much is reality? Let’s break this down logically and focus on what’s actionable today.\u003c/p\u003e\n\u003ch2 id=\"the-bold-claims\"\u003eThe Bold Claims\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eMark Zuckerberg:\u003c/strong\u003e \u003cem\u003e\u0026ldquo;Probably in 2025, Meta will have AI that can function as a mid-level engineer.\u0026rdquo;\u003c/em\u003e\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/vol1qJB2waE?si=OOPOLaK20VIprzoU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003cp\u003e\u003cstrong\u003eSalesforce CEO:\u003c/strong\u003e \u003cem\u003e\u0026ldquo;We’re not adding any more engineers next year because AI has boosted productivity.\u0026rdquo;\u003c/em\u003e\u003c/p\u003e","title":"Is AI Replacing Software Engineers? A Mid-Level Developer’s Perspective"},{"content":"As developers, we thrive on automation. Yet, it\u0026rsquo;s often said that one of the best ways to advance our careers is through blog contributions. Despite this, starting a blog can feel daunting—it\u0026rsquo;s not just about writing. There\u0026rsquo;s ideation, creating templates, validation, and the publishing process itself. And let’s face it, it all takes time.\nI have used the following automation blog pipeline inspired from various developers and curated this workflow.\nWhy Obsidian? Every developer has their own preferred tool for taking notes. But if you haven’t tried Obsidian, you\u0026rsquo;re missing out.\nObsidian is, hands down, the best note-taking application for developers. If you haven\u0026rsquo;t tried it yet, do yourself a favor—download Obsidian now!\nWith Obsidian, all aspects of the blogging process come together seamlessly. You can ideate, organize notes, draft posts, and even template your blog—all within a single, powerful tool and with its support for Markdown, writing and formatting your posts becomes a breeze.\nFor blog contents add some front matter/properties like title, data, and tags (based on Hugo themes they support variety of options).\n--- title: blogtitle date: 2024-11-06 draft: false tags: - tag1 - tag2 --- Go - Hugo But how to make the Obsidian\u0026rsquo;s markdown written content to html? Hugo, makes it hassle-free and with Hugo’s user-friendly setup and an extensive community of themes, you can create a professional-looking site with minimal effort.\nInstall Hugo - https://gohugo.io/installation, with all the mentioned prerequisites. Create a Hugo project (I\u0026rsquo;m using yaml for my configurations) and configure the Hugo theme of you choice. hugo new site MyPersonalBlogSite -f yaml Hugo Theme For my blog, I\u0026rsquo;m using Papermod theme. You can choose any, and go over the installation steps and ready to go. For Papermod refer - Papermod installation wiki.\nSync Obsidian content to Hugo For mac/linux use rsync to sync the content from Obsidian folder to Hugo content. For windows there are similar tools like robocopy.\nrsync -av --delete \u0026#34;sourcepath\u0026#34; \u0026#34;destinationpath\u0026#34; Under obsidian, create a new folder to manage your blog content \u0026lt;obsidian vault\u0026gt;/BlogPosts and for the hugo project the content should be copied to \u0026lt;hugo project root\u0026gt;/content/posts.\nBut there\u0026rsquo;s a issue, with the above command the text content of the files get synced, but Obsidian handles the attachment in a different way like in the root folder (default) or as per the folder configuration configured by the individuals.\nTo handle that, use the below python script (written for linux, modify accordingly for windows/other OS, or ask straight to a LLM chatbot) which looks for the image files within the markdown content and finds the respective file within the obsidian source attachment folder and modifies the content within the hugo\u0026rsquo;s content folder.\nimport os import re import shutil # Paths for source (Obsidian Vault) and destination (Hugo Project) POSTS_DIR = \u0026#34;\u0026lt;Hugo project root path\u0026gt;/content/posts/\u0026#34; ATTACHMENTS_DIR = \u0026#34;\u0026lt;Obsidian vault attachements path\u0026gt;/\u0026#34; STATIC_FILES_DIR = \u0026#34;\u0026lt;Hugo project root path\u0026gt;/static/images/\u0026#34; # Regex to match any attachment (image, pdf, etc.) ATTACHMENT_REGEX = r\u0026#39;\\[\\[([^]]+\\.\\S+)\\]\\]\u0026#39; # Process each markdown file in the posts directory for filename in os.listdir(POSTS_DIR): if filename.endswith(\u0026#34;.md\u0026#34;): filepath = os.path.join(POSTS_DIR, filename) print(f\u0026#34;Processing file: {filepath}\u0026#34;) # Read the content of the markdown file with open(filepath, \u0026#34;r\u0026#34;) as file: content = file.read() # Find all attachment links (images) attachments = re.findall(ATTACHMENT_REGEX, content) for attachment in attachments: print(f\u0026#34; Found attachment: {attachment}\u0026#34;) # Format the attachment link for markdown formatted_link = f\u0026#34;[Image Description](/images/{attachment.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; content = content.replace(f\u0026#34;[[{attachment}]]\u0026#34;, formatted_link) # Copy the attachment to the Hugo static files directory attachment_source = os.path.join(ATTACHMENTS_DIR, attachment) if os.path.exists(attachment_source): target_path = os.path.join(STATIC_FILES_DIR, attachment) target_dir = os.path.dirname(target_path) # Create the target directory if it doesn\u0026#39;t exist if not os.path.exists(target_dir): os.makedirs(target_dir) print(f\u0026#34; Created directory: {target_dir}\u0026#34;) # Copy the attachment to the static folder shutil.copy(attachment_source, target_path) print(f\u0026#34; Copied {attachment} to {target_path}\u0026#34;) else: print(f\u0026#34; Warning: Attachment not found: {attachment_source}\u0026#34;) # Write the updated content back to the markdown file with open(filepath, \u0026#34;w\u0026#34;) as file: file.write(content) print(\u0026#34;Markdown files processed and attachments copied successfully.\u0026#34;) Github Page - repo setup Now we need to create a repository which will host the static files hosted in the Github pages.\nCreate a repository with the required URL, l used inbakrish.github.io. Now configure this repository as s submodule under the hugo blog project for the /public folder. git submodule add git@github.com-personal:\u0026lt;user name\u0026gt;/\u0026lt;repo name\u0026gt;.git public Now verify the remote for the submodule added above, cd /public git remote -v #-\u0026gt; origin git@github.com-personal:\u0026lt;user name\u0026gt;/\u0026lt;repo name\u0026gt;.git Generate static files Now all the setup in place, modify the baseURL config,\n# config.yaml baseURL: \u0026#34;https://inbakrish.github.io/\u0026#34; Next, trigger the hugo command to generate the static HTML files content,\nhugo # Output sample Start building sites … hugo v0.139.3-2f6864387cd31b975914e8373d4bf38bddbd47bc+extended linux/amd64 BuildDate=2024-11-29T15:36:56Z VendorInfo=snap:0.139.3 | EN -------------------+----- Pages | 21 Paginator pages | 0 Non-page files | 0 Static files | 2 Processed images | 0 Aliases | 5 Cleaned | 0 Total in 84 ms Deployment Stage all the changes under the public folder and push the changes to git@github.com-personal:\u0026lt;user name\u0026gt;/\u0026lt;repo name\u0026gt;.git repository.\nConfigure the Github repo pages settings, use Deploy from a branch, with the main branch. After the configuration setup, the static content (your awesome blog), will be hosted on the configured repo name (URL).\nNOTE - If you want custom domain configuration, refer to the official docs and it can be configured such.\nAutomate deployment using - Github Action (optional) Now instead of manually building the static files and pushing it to the gh page repository, trigger a github action for the main repository, which generates the static files and pushes it to the github page repo.\nCreate personal access token, as we need to access another repo create access token with repo and workflow scopes. Create production environment and add the PAT_TOKEN secret Provide read \u0026amp; write access for the github actions settings in the deploy repo. After the PAT_TOKEN and action permissions setup, use the following Github-action deployment workflow.\nname: Deploy Hugo site to Pages on: push: branches: [\u0026#34;master\u0026#34;] workflow_dispatch: permissions: contents: write pages: write id-token: write defaults: run: shell: bash jobs: deploy: runs-on: ubuntu-latest environment: production steps: - name: Checkout Source Repository uses: actions/checkout@v3 with: submodules: recursive fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build Hugo Site run: hugo - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PAT_TOKEN }} external_repository: InbaKrish/inbakrish.github.io publish_branch: main publish_dir: ./public user_name: \u0026#39;github-actions[bot]\u0026#39; user_email: \u0026#39;github-actions[bot]@users.noreply.github.com\u0026#39; Hola!, Now we have improved the automated setup, now steps just involves the files and image sync from obsidian to Hugo project, commit all the push. From the hugo project the Github action deploys the static site to the github page configures repo using the PAT_TOKEN.\nReferences -\u0026gt; Idea for Obsidian based approach,\n-\u0026gt; Github action based approach - https://theplaybook.dev/docs/deploy-hugo-to-github-pages/\nGithub References Main Hugo project - https://github.com/InbaKrish/inbaKrish_Blog Github page submodule - https://github.com/InbaKrish/inbakrish.github.io\n","permalink":"https://inbakrish.github.io/posts/obsidian-to-github-page---automated-blog-pipeline/","summary":"\u003cp\u003eAs developers, we thrive on automation. Yet, it\u0026rsquo;s often said that one of the best ways to advance our careers is through blog contributions. Despite this, starting a blog can feel daunting—it\u0026rsquo;s not just about writing. There\u0026rsquo;s ideation, creating templates, validation, and the publishing process itself. And let’s face it, it all takes time.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Image Description\" loading=\"lazy\" src=\"/images/Pasted%20image%2020241207210246.png\"\u003e\u003c/p\u003e\n\u003cp\u003eI have used the following automation blog pipeline inspired from various developers and curated this workflow.\u003c/p\u003e","title":"Obsidian to Github page - Blog pipeline"}]