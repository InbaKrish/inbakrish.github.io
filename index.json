[{"content":"Think about you have two tables author and blogs,\n-- Authors table CREATE TABLE authors( id serial primary key, name character varying unique ); -- populate authors table with random unique values INSERT INTO authors (name) SELECT md5(random()::text) FROM generate_series(1, 1000000); -- Blogs table CREATE TABLE blogs( id serial primary key, author_id integer references authors (id), name character varying unique ); -- randomly matching blogs to different authors, each can have 0/n number of blogs associated INSERT INTO blogs (author_id, name) SELECT floor(random() * 300000 + 1)::int, md5(random()::text) FROM generate_series(1, 1000000); -- add index for foreign key CREATE INDEX blogs_author_id ON blogs(author_id); now I need to perform the operation to find out authors without any blogs, so known approach is that we perform left join between the author and blogs and perform filter query to find rows from author table without and matching blog items.\nThis works, but think twice, in this operation do we need to perform entire table left join to get the filter query (though PostgreSQL handle the join efficiently with the planner).\nPerformance Battle (Joins vs Semi-Joins) Let\u0026rsquo;s start with familiar inner join,\nselect authors.name from authors inner join blogs on blogs.author_id = authors.id; -\u0026gt; Explain analyze provides the following plan,\nexplain analyze select authors.name from authors inner join blogs on blogs.author_id = authors.id; QUERY PLAN --------------------------------------------------------------------------------------------------------------------------------------------------- Merge Join (cost=5.64..49642.51 rows=1000000 width=33) (actual time=0.044..135.106 rows=1000000 loops=1) Merge Cond: (authors.id = blogs.author_id) -\u0026gt; Index Scan using authors_pkey on authors (cost=0.42..34317.43 rows=1000000 width=37) (actual time=0.010..21.355 rows=300000 loops=1) -\u0026gt; Index Only Scan using blogs_author_id on blogs (cost=0.42..25992.42 rows=1000000 width=4) (actual time=0.031..47.850 rows=1000000 loops=1) Heap Fetches: 0 Planning Time: 0.409 ms Execution Time: 151.686 ms (7 rows) Let\u0026rsquo;s check the semi-join approach,\nselect authors.name from authors where exists (select 1 from blogs where blogs.author_id = authors.id); -\u0026gt; And now, we get,\nexplain analyze select authors.name from authors where exists (select 1 from blogs where blogs.author_id = authors.id); QUERY PLAN --------------------------------------------------------------------------------------------------------------------------------------------------- Merge Semi Join (cost=6.23..49459.71 rows=237176 width=33) (actual time=0.053..111.667 rows=289288 loops=1) Merge Cond: (authors.id = blogs.author_id) -\u0026gt; Index Scan using authors_pkey on authors (cost=0.42..34317.43 rows=1000000 width=37) (actual time=0.009..19.703 rows=300000 loops=1) -\u0026gt; Index Only Scan using blogs_author_id on blogs (cost=0.42..25992.42 rows=1000000 width=4) (actual time=0.040..44.631 rows=1000000 loops=1) Heap Fetches: 0 Planning Time: 0.415 ms Execution Time: 116.221 ms (7 rows) In this approach semi-join is performed, and the exists short-circuits the filter query as soon as the first matching row is found.\nJOIN (inner join) SEMI JOIN (where exists) 148.116 116.073 158.137 121.852 139.534 112.830 136.839 111.900 143.235 115.967 based on the above iterations, the semi-join performs 20% faster than normal join on average. Not ends here, in INNER JOIN, there is an obvious duplication issue, say author has more than one blog then the author name value gets duplicated, now to de-duplicate the results, we can perform the DISTINCT or the GROUP BY approach, so let\u0026rsquo;s check the performances for those,\n-\u0026gt; Using DISTINCT,\nselect distinct authors.name from authors inner join blogs on blogs.author_id = authors.id; --- EXPLAIN ANALYZE OUTPUT Unique (cost=204009.80..209009.80 rows=1000000 width=33) (actual time=1180.678..1540.446 rows=289288 loops=1) -\u0026gt; Sort (cost=204009.80..206509.80 rows=1000000 width=33) (actual time=1180.676..1480.833 rows=1000000 loops=1) Sort Key: authors.name Sort Method: external merge Disk: 42096kB -\u0026gt; Merge Join (cost=4.33..49660.96 rows=1000000 width=33) (actual time=2.727..142.405 rows=1000000 loops=1) Merge Cond: (authors.id = blogs.author_id) -\u0026gt; Index Scan using authors_pkey on authors (cost=0.42..34317.43 rows=1000000 width=37) (actual time=0.006..23.055 rows=300000 loops=1) -\u0026gt; Index Only Scan using blogs_author_id on blogs (cost=0.42..25992.42 rows=1000000 width=4) (actual time=0.015..48.093 rows=1000000 loops=1) Heap Fetches: 0 Planning Time: 0.279 ms JIT: Functions: 6 Options: Inlining false, Optimization false, Expressions true, Deforming true Timing: Generation 0.775 ms, Inlining 0.000 ms, Optimization 0.177 ms, Emission 2.443 ms, Total 3.396 ms Execution Time: 1550.252 ms (15 rows) Bruh! ðŸ«¢ -\u0026gt; Wait what about GROUP BY,\nselect authors.name from authors inner join blogs on blogs.author_id = authors.id group by authors.name; --- EXPLAIN ANALYZE OUTPUT Group (cost=87824.80..188178.89 rows=1000000 width=33) (actual time=414.521..647.118 rows=289288 loops=1) Group Key: authors.name -\u0026gt; Gather Merge (cost=87824.80..186095.55 rows=833334 width=33) (actual time=414.517..622.721 rows=290229 loops=1) Workers Planned: 2 Workers Launched: 2 -\u0026gt; Group (cost=86824.77..88908.11 rows=416667 width=33) (actual time=394.005..520.693 rows=96743 loops=3) Group Key: authors.name -\u0026gt; Sort (cost=86824.77..87866.44 rows=416667 width=33) (actual time=393.996..499.231 rows=333333 loops=3) Sort Key: authors.name Sort Method: external merge Disk: 14768kB Worker 0: Sort Method: external merge Disk: 13576kB Worker 1: Sort Method: external merge Disk: 13856kB -\u0026gt; Merge Join (cost=3.44..36535.96 rows=416667 width=33) (actual time=5.821..77.417 rows=333333 loops=3) Merge Cond: (blogs.author_id = authors.id) -\u0026gt; Parallel Index Only Scan using blogs_author_id on blogs (cost=0.42..20159.09 rows=416667 width=4) (actual time=0.029..17.542 rows=333333 loops=3) Heap Fetches: 0 -\u0026gt; Index Scan using authors_pkey on authors (cost=0.42..34317.43 rows=1000000 width=37) (actual time=0.026..24.040 rows=297278 loops=3) Planning Time: 0.417 ms JIT: Functions: 26 Options: Inlining false, Optimization false, Expressions true, Deforming true Timing: Generation 4.823 ms, Inlining 0.000 ms, Optimization 0.995 ms, Emission 13.016 ms, Total 18.835 ms Execution Time: 656.955 ms (23 rows) JOIN (with DISTINCT) JOIN (with GROUP BY) SEMI JOIN (where exists) 1668.520 664.673 116.073 1613.289 678.617 121.852 1625.657 690.630 112.830 1487.259 660.332 111.900 1490.468 716.866 115.967 from above observations, its obvious that WHERE EXISTS approach performs faster than the traditional join based approach, and the performance to the load also will be much efficient in this approach, as its clear that it performs a short-circuit filtering.\nSimilarly to find non-associated filtering, we can -\u0026gt; Instead of LEFT JOIN and id IS NULL way,\nselect authors.name from authors left join blogs on blogs.author_id = authors.id where blogs.id is null; -\u0026gt; we can do WHERE NOT EXISTS,\nselect authors.name from authors where not exists (select 1 from blogs where blogs.author_id = authors.id); Further Reading https://www.geeksforgeeks.org/difference-between-anti-join-and-semi-join/ https://www.pgmustard.com/docs/explain/merge-semi-join\n","permalink":"https://inbakrish.github.io/posts/semi-join---optimize-your-join-based-filter-queries-for-maximum-performance/","summary":"\u003cp\u003eThink about you have two tables author and blogs,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e-- Authors table\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003eserial\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eprimary\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003echaracter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003evarying\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eunique\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e-- populate authors table with random unique values\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eINTO\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emd5\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erandom\u003c/span\u003e\u003cspan class=\"p\"\u003e()::\u003c/span\u003e\u003cspan class=\"nb\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egenerate_series\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1000000\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e-- Blogs table\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eblogs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003eserial\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eprimary\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eauthor_id\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003einteger\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ereferences\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003echaracter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003evarying\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eunique\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e-- randomly matching blogs to different authors, each can have 0/n number of blogs associated\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eINTO\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eblogs\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eauthor_id\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efloor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erandom\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e300000\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)::\u003c/span\u003e\u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emd5\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erandom\u003c/span\u003e\u003cspan class=\"p\"\u003e()::\u003c/span\u003e\u003cspan class=\"nb\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egenerate_series\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1000000\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e-- add index for foreign key\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eINDEX\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eblogs_author_id\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eON\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eblogs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eauthor_id\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003enow I need to perform the operation to find out authors without any blogs, so known approach is that we perform left join between the author and blogs and perform filter query to find rows from author table without and matching blog items.\u003c/p\u003e","title":"SEMI-JOIN - Optimize Your JOIN-Based Filter Queries for Maximum Performance"},{"content":"As developers, we thrive on automation. Yet, it\u0026rsquo;s often said that one of the best ways to advance our careers is through blog contributions. Despite this, starting a blog can feel dauntingâ€”it\u0026rsquo;s not just about writing. There\u0026rsquo;s ideation, creating templates, validation, and the publishing process itself. And letâ€™s face it, it all takes time.\nI have used the following automation blog pipeline inspired from various developers and curated this workflow.\nWhy Obsidian? Every developer has their own preferred tool for taking notes. But if you havenâ€™t tried Obsidian, you\u0026rsquo;re missing out.\nObsidian is, hands down, the best note-taking application for developers. If you haven\u0026rsquo;t tried it yet, do yourself a favorâ€”download Obsidian now!\nWith Obsidian, all aspects of the blogging process come together seamlessly. You can ideate, organize notes, draft posts, and even template your blogâ€”all within a single, powerful tool and with its support for Markdown, writing and formatting your posts becomes a breeze.\nFor blog contents add some front matter/properties like title, data, and tags (based on Hugo themes they support variety of options).\n--- title: blogtitle date: 2024-11-06 draft: false tags: - tag1 - tag2 --- Go - Hugo But how to make the Obsidian\u0026rsquo;s markdown written content to html? Hugo, makes it hassle-free and with Hugoâ€™s user-friendly setup and an extensive community of themes, you can create a professional-looking site with minimal effort.\nInstall Hugo - https://gohugo.io/installation, with all the mentioned prerequisites. Create a Hugo project (I\u0026rsquo;m using yaml for my configurations) and configure the Hugo theme of you choice. hugo new site MyPersonalBlogSite -f yaml Hugo Theme For my blog, I\u0026rsquo;m using Papermod theme. You can choose any, and go over the installation steps and ready to go. For Papermod refer - Papermod installation wiki.\nSync Obsidian content to Hugo For mac/linux use rsync to sync the content from Obsidian folder to Hugo content. For windows there are similar tools like robocopy.\nrsync -av --delete \u0026#34;sourcepath\u0026#34; \u0026#34;destinationpath\u0026#34; Under obsidian, create a new folder to manage your blog content \u0026lt;obsidian vault\u0026gt;/BlogPosts and for the hugo project the content should be copied to \u0026lt;hugo project root\u0026gt;/content/posts.\nBut there\u0026rsquo;s a issue, with the above command the text content of the files get synced, but Obsidian handles the attachment in a different way like in the root folder (default) or as per the folder configuration configured by the individuals.\nTo handle that, use the below python script (written for linux, modify accordingly for windows/other OS, or ask straight to a LLM chatbot) which looks for the image files within the markdown content and finds the respective file within the obsidian source attachment folder and modifies the content within the hugo\u0026rsquo;s content folder.\nimport os import re import shutil # Paths for source (Obsidian Vault) and destination (Hugo Project) POSTS_DIR = \u0026#34;\u0026lt;Hugo project root path\u0026gt;/content/posts/\u0026#34; ATTACHMENTS_DIR = \u0026#34;\u0026lt;Obsidian vault attachements path\u0026gt;/\u0026#34; STATIC_FILES_DIR = \u0026#34;\u0026lt;Hugo project root path\u0026gt;/static/images/\u0026#34; # Regex to match any attachment (image, pdf, etc.) ATTACHMENT_REGEX = r\u0026#39;\\[\\[([^]]+\\.\\S+)\\]\\]\u0026#39; # Process each markdown file in the posts directory for filename in os.listdir(POSTS_DIR): if filename.endswith(\u0026#34;.md\u0026#34;): filepath = os.path.join(POSTS_DIR, filename) print(f\u0026#34;Processing file: {filepath}\u0026#34;) # Read the content of the markdown file with open(filepath, \u0026#34;r\u0026#34;) as file: content = file.read() # Find all attachment links (images) attachments = re.findall(ATTACHMENT_REGEX, content) for attachment in attachments: print(f\u0026#34; Found attachment: {attachment}\u0026#34;) # Format the attachment link for markdown formatted_link = f\u0026#34;[Image Description](/images/{attachment.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; content = content.replace(f\u0026#34;[[{attachment}]]\u0026#34;, formatted_link) # Copy the attachment to the Hugo static files directory attachment_source = os.path.join(ATTACHMENTS_DIR, attachment) if os.path.exists(attachment_source): target_path = os.path.join(STATIC_FILES_DIR, attachment) target_dir = os.path.dirname(target_path) # Create the target directory if it doesn\u0026#39;t exist if not os.path.exists(target_dir): os.makedirs(target_dir) print(f\u0026#34; Created directory: {target_dir}\u0026#34;) # Copy the attachment to the static folder shutil.copy(attachment_source, target_path) print(f\u0026#34; Copied {attachment} to {target_path}\u0026#34;) else: print(f\u0026#34; Warning: Attachment not found: {attachment_source}\u0026#34;) # Write the updated content back to the markdown file with open(filepath, \u0026#34;w\u0026#34;) as file: file.write(content) print(\u0026#34;Markdown files processed and attachments copied successfully.\u0026#34;) Github Page - repo setup Now we need to create a repository which will host the static files hosted in the Github pages.\nCreate a repository with the required URL, l used inbakrish.github.io. Now configure this repository as s submodule under the hugo blog project for the /public folder. git submodule add git@github.com-personal:\u0026lt;user name\u0026gt;/\u0026lt;repo name\u0026gt;.git public Now verify the remote for the submodule added above, cd /public git remote -v #-\u0026gt; origin git@github.com-personal:\u0026lt;user name\u0026gt;/\u0026lt;repo name\u0026gt;.git Generate static files Now all the setup in place, modify the baseURL config,\n# config.yaml baseURL: \u0026#34;https://inbakrish.github.io/\u0026#34; Next, trigger the hugo command to generate the static HTML files content,\nhugo # Output sample Start building sites â€¦ hugo v0.139.3-2f6864387cd31b975914e8373d4bf38bddbd47bc+extended linux/amd64 BuildDate=2024-11-29T15:36:56Z VendorInfo=snap:0.139.3 | EN -------------------+----- Pages | 21 Paginator pages | 0 Non-page files | 0 Static files | 2 Processed images | 0 Aliases | 5 Cleaned | 0 Total in 84 ms Deployment Stage all the changes under the public folder and push the changes to git@github.com-personal:\u0026lt;user name\u0026gt;/\u0026lt;repo name\u0026gt;.git repository.\nConfigure the Github repo pages settings, use Deploy from a branch, with the main branch. After the configuration setup, the static content (your awesome blog), will be hosted on the configured repo name (URL).\nNOTE - If you want custom domain configuration, refer to the official docs and it can be configured such.\nAutomate deployment using - Github Action (optional) Now instead of manually building the static files and pushing it to the gh page repository, trigger a github action for the main repository, which generates the static files and pushes it to the github page repo.\nCreate personal access token, as we need to access another repo create access token with repo and workflow scopes. Create production environment and add the PAT_TOKEN secret Provide read \u0026amp; write access for the github actions settings in the deploy repo. After the PAT_TOKEN and action permissions setup, use the following Github-action deployment workflow.\nname: Deploy Hugo site to Pages on: push: branches: [\u0026#34;master\u0026#34;] workflow_dispatch: permissions: contents: write pages: write id-token: write defaults: run: shell: bash jobs: deploy: runs-on: ubuntu-latest environment: production steps: - name: Checkout Source Repository uses: actions/checkout@v3 with: submodules: recursive fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build Hugo Site run: hugo - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PAT_TOKEN }} external_repository: InbaKrish/inbakrish.github.io publish_branch: main publish_dir: ./public user_name: \u0026#39;github-actions[bot]\u0026#39; user_email: \u0026#39;github-actions[bot]@users.noreply.github.com\u0026#39; Hola!, Now we have improved the automated setup, now steps just involves the files and image sync from obsidian to Hugo project, commit all the push. From the hugo project the Github action deploys the static site to the github page configures repo using the PAT_TOKEN.\nReferences -\u0026gt; Idea for Obsidian based approach,\n-\u0026gt; Github action based approach - https://theplaybook.dev/docs/deploy-hugo-to-github-pages/\nGithub References Main Hugo project - https://github.com/InbaKrish/inbaKrish_Blog Github page submodule - https://github.com/InbaKrish/inbakrish.github.io\n","permalink":"https://inbakrish.github.io/posts/obsidian-to-github-page---automated-blog-pipeline/","summary":"\u003cp\u003eAs developers, we thrive on automation. Yet, it\u0026rsquo;s often said that one of the best ways to advance our careers is through blog contributions. Despite this, starting a blog can feel dauntingâ€”it\u0026rsquo;s not just about writing. There\u0026rsquo;s ideation, creating templates, validation, and the publishing process itself. And letâ€™s face it, it all takes time.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Image Description\" loading=\"lazy\" src=\"/images/Pasted%20image%2020241207210246.png\"\u003e\u003c/p\u003e\n\u003cp\u003eI have used the following automation blog pipeline inspired from various developers and curated this workflow.\u003c/p\u003e","title":"Obsidian to Github page - Blog pipeline"}]